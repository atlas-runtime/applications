import {wrapObject as wrapper} from './atlas-wrapper.js'
import {KnightTour_bench as KnightTour_asd} from './benchmarks/micro/Backtracking/KnightTour.js'
let KnightTour_bench = wrapper(KnightTour_asd)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
KnightTour_bench(6)
print('*KnightTour done*')
import {NQueen_bench as NQueen_asd} from './benchmarks/micro/Backtracking/NQueen.js'
let NQueen_bench = wrapper(NQueen_asd)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
NQueen_bench(20)
print('*NQueen done*')
import {DoublyLinkedList_bench as DoublyLinkedList_asd} from './benchmarks/micro/Data-Structures/DoublyLinkedList.js'
let DoublyLinkedList_bench = wrapper(DoublyLinkedList_asd)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
DoublyLinkedList_bench(100000)
print('*DoublyLinkedList done*')
import {MinPriorityQueue_bench as MinPriorityQueue_asd} from './benchmarks/micro/Data-Structures/MinPriorityQueue.js'
let MinPriorityQueue_bench = wrapper(MinPriorityQueue_asd)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
MinPriorityQueue_bench(100000)
print('*MinPriorityQueue done*')
import {Queue_bench as Queue_asd} from './benchmarks/micro/Data-Structures/Queue.js'
let Queue_bench = wrapper(Queue_asd)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
Queue_bench(30000)
print('*Queue done*')
import {QueueUsing2Stacks_bench as QueueUsing2Stacks_asd} from './benchmarks/micro/Data-Structures/QueueUsing2Stacks.js'
let QueueUsing2Stacks_bench = wrapper(QueueUsing2Stacks_asd)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
QueueUsing2Stacks_bench(4000)
print('*QueueUsing2Stacks done*')
import {SingleCircularLinkedList_bench as SingleCircularLinkedList_asd} from './benchmarks/micro/Data-Structures/SingleCircularLinkedList.js'
let SingleCircularLinkedList_bench = wrapper(SingleCircularLinkedList_asd)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
SingleCircularLinkedList_bench(10000)
print('*SingleCircularLinkedList done*')
import {SinglyLinkList_bench as SinglyLinkList_asd} from './benchmarks/micro/Data-Structures/SinglyLinkList.js'
let SinglyLinkList_bench = wrapper(SinglyLinkList_asd)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
SinglyLinkList_bench(20000)
print('*SinglyLinkList done*')
import {Trie_bench as Trie_asd} from './benchmarks/micro/Data-Structures/Trie.js'
let Trie_bench = wrapper(Trie_asd)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
Trie_bench(300000)
print('*Trie done*')
import {CoinChange_bench as CoinChange_asd} from './benchmarks/micro/Dynamic-Programming/CoinChange.js'
let CoinChange_bench = wrapper(CoinChange_asd)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
CoinChange_bench(1000000)
print('*CoinChange done*')
import {EditDistance_bench as EditDistance_asd} from './benchmarks/micro/Dynamic-Programming/EditDistance.js'
let EditDistance_bench = wrapper(EditDistance_asd)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
EditDistance_bench(1000)
print('*EditDistance done*')
import {KadaneAlgo_bench as KadaneAlgo_asd} from './benchmarks/micro/Dynamic-Programming/KadaneAlgo.js'
let KadaneAlgo_bench = wrapper(KadaneAlgo_asd)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
KadaneAlgo_bench(1000000)
print('*KadaneAlgo done*')
import {LevenshteinDistance_bench as LevenshteinDistance_asd} from './benchmarks/micro/Dynamic-Programming/LevenshteinDistance.js'
let LevenshteinDistance_bench = wrapper(LevenshteinDistance_asd)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
LevenshteinDistance_bench(2000)
print('*LevenshteinDistance done*')
import {LongestCommonSubsequence_bench as LongestCommonSubsequence_asd} from './benchmarks/micro/Dynamic-Programming/LongestCommonSubsequence.js'
let LongestCommonSubsequence_bench = wrapper(LongestCommonSubsequence_asd)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
LongestCommonSubsequence_bench(13)
print('*LongestCommonSubsequence done*')
import {LongestIncreasingSubsequence_bench as LongestIncreasingSubsequence_asd} from './benchmarks/micro/Dynamic-Programming/LongestIncreasingSubsequence.js'
let LongestIncreasingSubsequence_bench = wrapper(LongestIncreasingSubsequence_asd)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
LongestIncreasingSubsequence_bench(10000)
print('*LongestIncreasingSubsequence done*')
import {LongestPalindromicSubsequence_bench as LongestPalindromicSubsequence_asd} from './benchmarks/micro/Dynamic-Programming/LongestPalindromicSubsequence.js'
let LongestPalindromicSubsequence_bench = wrapper(LongestPalindromicSubsequence_asd)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
LongestPalindromicSubsequence_bench(2000)
print('*LongestPalindromicSubsequence done*')
import {MaxNonAdjacentSum_bench as MaxNonAdjacentSum_asd} from './benchmarks/micro/Dynamic-Programming/MaxNonAdjacentSum.js'
let MaxNonAdjacentSum_bench = wrapper(MaxNonAdjacentSum_asd)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
MaxNonAdjacentSum_bench(1000000)
print('*MaxNonAdjacentSum done*')
import {NumberOfSubsetEqualToGivenSum_bench as NumberOfSubsetEqualToGivenSum_asd} from './benchmarks/micro/Dynamic-Programming/NumberOfSubsetEqualToGivenSum.js'
let NumberOfSubsetEqualToGivenSum_bench = wrapper(NumberOfSubsetEqualToGivenSum_asd)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
NumberOfSubsetEqualToGivenSum_bench(10000)
print('*NumberOfSubsetEqualToGivenSum done*')
import {SieveOfEratosthenes_bench as SieveOfEratosthenes_asd} from './benchmarks/micro/Dynamic-Programming/SieveOfEratosthenes.js'
let SieveOfEratosthenes_bench = wrapper(SieveOfEratosthenes_asd)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
SieveOfEratosthenes_bench(1000000)
print('*SieveOfEratosthenes done*')
import {TrappingRainWater_bench as TrappingRainWater_asd} from './benchmarks/micro/Dynamic-Programming/TrappingRainWater.js'
let TrappingRainWater_bench = wrapper(TrappingRainWater_asd)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
TrappingRainWater_bench(1000000)
print('*TrappingRainWater done*')
import {ZeroOneKnapsack_bench as ZeroOneKnapsack_asd} from './benchmarks/micro/Dynamic-Programming/ZeroOneKnapsack.js'
let ZeroOneKnapsack_bench = wrapper(ZeroOneKnapsack_asd)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
ZeroOneKnapsack_bench(10000)
print('*ZeroOneKnapsack done*')
import {ConnectedComponents_bench as ConnectedComponents_asd} from './benchmarks/micro/Graphs/ConnectedComponents.js'
let ConnectedComponents_bench = wrapper(ConnectedComponents_asd)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
ConnectedComponents_bench(300)
print('*ConnectedComponents done*')
import {DepthFirstSearchIterative_bench as DepthFirstSearchIterative_asd} from './benchmarks/micro/Graphs/DepthFirstSearchIterative.js'
let DepthFirstSearchIterative_bench = wrapper(DepthFirstSearchIterative_asd)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
DepthFirstSearchIterative_bench(1100)
print('*DepthFirstSearchIterative done*')
import {Dijkstra_bench as Dijkstra_asd} from './benchmarks/micro/Graphs/Dijkstra.js'
let Dijkstra_bench = wrapper(Dijkstra_asd)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
Dijkstra_bench(10000)
print('*Dijkstra done*')
import {KruskalMST_bench as KruskalMST_asd} from './benchmarks/micro/Graphs/KruskalMST.js'
let KruskalMST_bench = wrapper(KruskalMST_asd)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
KruskalMST_bench(650)
print('*KruskalMST done*')
import {NumberOfIslands_bench as NumberOfIslands_asd} from './benchmarks/micro/Graphs/NumberOfIslands.js'
let NumberOfIslands_bench = wrapper(NumberOfIslands_asd)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
NumberOfIslands_bench(400000)
print('*NumberOfIslands done*')
import {PrimMST_bench as PrimMST_asd} from './benchmarks/micro/Graphs/PrimMST.js'
let PrimMST_bench = wrapper(PrimMST_asd)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
PrimMST_bench(2000)
print('*PrimMST done*')
import {FibonacciNumberRecursive_bench as FibonacciNumberRecursive_asd} from './benchmarks/micro/Recursive/FibonacciNumberRecursive.js'
let FibonacciNumberRecursive_bench = wrapper(FibonacciNumberRecursive_asd)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
FibonacciNumberRecursive_bench(38)
print('*FibonacciNumberRecursive done*')
import {BinarySearch_bench as BinarySearch_asd} from './benchmarks/micro/Search/BinarySearch.js'
let BinarySearch_bench = wrapper(BinarySearch_asd)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
BinarySearch_bench(1000000)
print('*BinarySearch done*')
import {ExponentialSearch_bench as ExponentialSearch_asd} from './benchmarks/micro/Search/ExponentialSearch.js'
let ExponentialSearch_bench = wrapper(ExponentialSearch_asd)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
ExponentialSearch_bench(1000000)
print('*ExponentialSearch done*')
import {FibonacciSearch_bench as FibonacciSearch_asd} from './benchmarks/micro/Search/FibonacciSearch.js'
let FibonacciSearch_bench = wrapper(FibonacciSearch_asd)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
FibonacciSearch_bench(1000000)
print('*FibonacciSearch done*')
import {InterpolationSearch_bench as InterpolationSearch_asd} from './benchmarks/micro/Search/InterpolationSearch.js'
let InterpolationSearch_bench = wrapper(InterpolationSearch_asd)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
InterpolationSearch_bench(1000000)
print('*InterpolationSearch done*')
import {JumpSearch_bench as JumpSearch_asd} from './benchmarks/micro/Search/JumpSearch.js'
let JumpSearch_bench = wrapper(JumpSearch_asd)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
JumpSearch_bench(1000000)
print('*JumpSearch done*')
import {StringSearch_bench as StringSearch_asd} from './benchmarks/micro/Search/StringSearch.js'
let StringSearch_bench = wrapper(StringSearch_asd)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
StringSearch_bench(2000000)
print('*StringSearch done*')
import {BubbleSort_bench as BubbleSort_asd} from './benchmarks/micro/Sorts/BubbleSort.js'
let BubbleSort_bench = wrapper(BubbleSort_asd)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
BubbleSort_bench(5000)
print('*BubbleSort done*')
import {BucketSort_bench as BucketSort_asd} from './benchmarks/micro/Sorts/BucketSort.js'
let BucketSort_bench = wrapper(BucketSort_asd)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
BucketSort_bench(1000000)
print('*BucketSort done*')
import {CocktailShakerSort_bench as CocktailShakerSort_asd} from './benchmarks/micro/Sorts/CocktailShakerSort.js'
let CocktailShakerSort_bench = wrapper(CocktailShakerSort_asd)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
CocktailShakerSort_bench(5000)
print('*CocktailShakerSort done*')
import {CombSort_bench as CombSort_asd} from './benchmarks/micro/Sorts/CombSort.js'
let CombSort_bench = wrapper(CombSort_asd)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
CombSort_bench(1000000)
print('*CombSort done*')
import {CountingSort_bench as CountingSort_asd} from './benchmarks/micro/Sorts/CountingSort.js'
let CountingSort_bench = wrapper(CountingSort_asd)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
CountingSort_bench(1000000)
print('*CountingSort done*')
import {CycleSort_bench as CycleSort_asd} from './benchmarks/micro/Sorts/CycleSort.js'
let CycleSort_bench = wrapper(CycleSort_asd)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
CycleSort_bench(10000)
print('*CycleSort done*')
import {FlashSort_bench as FlashSort_asd} from './benchmarks/micro/Sorts/FlashSort.js'
let FlashSort_bench = wrapper(FlashSort_asd)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
FlashSort_bench(1000000)
print('*FlashSort done*')
import {GnomeSort_bench as GnomeSort_asd} from './benchmarks/micro/Sorts/GnomeSort.js'
let GnomeSort_bench = wrapper(GnomeSort_asd)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
GnomeSort_bench(5000)
print('*GnomeSort done*')
import {HeapSort_bench as HeapSort_asd} from './benchmarks/micro/Sorts/HeapSort.js'
let HeapSort_bench = wrapper(HeapSort_asd)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
HeapSort_bench(1000000)
print('*HeapSort done*')
import {HeapSortV2_bench as HeapSortV2_asd} from './benchmarks/micro/Sorts/HeapSortV2.js'
let HeapSortV2_bench = wrapper(HeapSortV2_asd)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
HeapSortV2_bench(500000)
print('*HeapSortV2 done*')
import {InsertionSort_bench as InsertionSort_asd} from './benchmarks/micro/Sorts/InsertionSort.js'
let InsertionSort_bench = wrapper(InsertionSort_asd)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
InsertionSort_bench(20000)
print('*InsertionSort done*')
import {MergeSort_bench as MergeSort_asd} from './benchmarks/micro/Sorts/MergeSort.js'
let MergeSort_bench = wrapper(MergeSort_asd)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
MergeSort_bench(200000)
print('*MergeSort done*')
import {QuickSort_bench as QuickSort_asd} from './benchmarks/micro/Sorts/QuickSort.js'
let QuickSort_bench = wrapper(QuickSort_asd)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
QuickSort_bench(1000000)
print('*QuickSort done*')
import {RadixSort_bench as RadixSort_asd} from './benchmarks/micro/Sorts/RadixSort.js'
let RadixSort_bench = wrapper(RadixSort_asd)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
RadixSort_bench(100000)
print('*RadixSort done*')
import {ShellSort_bench as ShellSort_asd} from './benchmarks/micro/Sorts/ShellSort.js'
let ShellSort_bench = wrapper(ShellSort_asd)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
ShellSort_bench(1000000)
print('*ShellSort done*')
import {WiggleSort_bench as WiggleSort_asd} from './benchmarks/micro/Sorts/WiggleSort.js'
let WiggleSort_bench = wrapper(WiggleSort_asd)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
WiggleSort_bench(1000000)
print('*WiggleSort done*')
